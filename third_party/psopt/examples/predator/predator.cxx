//////////////////////////////////////////////////////////////////////////
//////////////////         predator.cxx        ///////////////////////////
//////////////////////////////////////////////////////////////////////////
////////////////           PSOPT  Example             ////////////////////
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
//////// Title:  Lotka-Volterra model parameter estimation //// //////////
//////// Last modified:  03 Jan 2014                      ////////////////
//////// Reference:     Schittkowski (2002)           	  ////////////////
//////// (See PSOPT handbook for full reference)           ///////////////
//////////////////////////////////////////////////////////////////////////
////////     Copyright (c) Victor M. Becerra, 2014        ////////////////
//////////////////////////////////////////////////////////////////////////
//////// This is part of the PSOPT software library, which ///////////////
//////// is distributed under the terms of the GNU Lesser ////////////////
//////// General Public License (LGPL)                    ////////////////
//////////////////////////////////////////////////////////////////////////

#include "psopt.h"

//////////////////////////////////////////////////////////////////////////
///////////////////  Define the observation function //////////
//////////////////////////////////////////////////////////////////////////



void  observation_function( adouble* observations,
                            adouble* states, adouble* controls,
                            adouble* parameters, adouble& time, int k,
                            adouble* xad, int iphase, Workspace* workspace)
{
	int i;
	for (i=0; i<2; i++) {
            observations[ i ] = states[ i ];
	}
}



//////////////////////////////////////////////////////////////////////////
///////////////////  Define the DAE's ////////////////////////////////////
//////////////////////////////////////////////////////////////////////////

void dae(adouble* derivatives, adouble* path, adouble* states,
         adouble* controls, adouble* parameters, adouble& time,
         adouble* xad, int iphase, Workspace* workspace)
{

    // Variables
       adouble x1, x2, p1, p2, p3, p4;

    // Differential states
       x1 = states[0];
       x2 = states[1];


    // Parameters
       p1 = parameters[0];
       p2 = parameters[1];
	    p3 = parameters[2];
       p4 = parameters[3];

       derivatives[0] = -p1*x1 + p2*x1*x2;

       derivatives[1] = p3*x2 - p4*x1*x2;

}

////////////////////////////////////////////////////////////////////////////
///////////////////  Define the events function ////////////////////////////
////////////////////////////////////////////////////////////////////////////

void events(adouble* e, adouble* initial_states, adouble* final_states,
            adouble* parameters,adouble& t0, adouble& tf, adouble* xad,
            int iphase, Workspace* workspace)
{
   int i;

   for (i=0; i<2; i++) {

      e[i]  = initial_states[i];

   }

}


///////////////////////////////////////////////////////////////////////////
///////////////////  Define the phase linkages function ///////////////////
///////////////////////////////////////////////////////////////////////////

void linkages( adouble* linkages, adouble* xad, Workspace* workspace)
{
  // No linkages as this is a single phase problem
}


////////////////////////////////////////////////////////////////////////////
///////////////////  Define the main routine ///////////////////////////////
////////////////////////////////////////////////////////////////////////////

int main(void)
{

////////////////////////////////////////////////////////////////////////////
///////////////////  Declare key structures ////////////////////////////////
////////////////////////////////////////////////////////////////////////////

    Alg  algorithm;
    Sol  solution;
    Prob problem;

////////////////////////////////////////////////////////////////////////////
///////////////////  Register problem name  ////////////////////////////////
////////////////////////////////////////////////////////////////////////////

    problem.name          			=       "Predator-prey example";
    problem.outfilename         	=       "predator.txt";

////////////////////////////////////////////////////////////////////////////
////////////  Define problem level constants & do level 1 setup ////////////
////////////////////////////////////////////////////////////////////////////

    problem.nphases   			        = 1;
    problem.nlinkages                 = 0;

    psopt_level1_setup(problem);


/////////////////////////////////////////////////////////////////////////////
/////////   Define phase related information & do level 2 setup /////////////
/////////////////////////////////////////////////////////////////////////////

    problem.phases(1).nstates   				= 2;
    problem.phases(1).ncontrols 				= 0;
    problem.phases(1).nevents   				= 2;
    problem.phases(1).npath     				= 0;
    problem.phases(1).nparameters       	= 4;
    problem.phases(1).nodes    		      << 20;
    problem.phases(1).nobserved        	= 2;
    problem.phases(1).nsamples          	= 10;

    psopt_level2_setup(problem, algorithm);

////////////////////////////////////////////////////////////////////////////
////////////  Load data for parameter estimation                ////////////
////////////////////////////////////////////////////////////////////////////

   int iphase = 1;
   load_parameter_estimation_data(problem, iphase, "../../../examples/predator/predator.dat");

   Print(problem.phases(1).observation_nodes, "observation nodes");
   Print(problem.phases(1).observations,"observations");
   Print(problem.phases(1).residual_weights,"weights");


////////////////////////////////////////////////////////////////////////////
///////////////////  Declare MatrixXd objects to store results //////////////
////////////////////////////////////////////////////////////////////////////

    MatrixXd x, p, t;

////////////////////////////////////////////////////////////////////////////
///////////////////  Enter problem bounds information //////////////////////
////////////////////////////////////////////////////////////////////////////


    problem.phases(1).bounds.lower.states(0) = 0.0;
    problem.phases(1).bounds.lower.states(1) = 0.0;
   


    problem.phases(1).bounds.upper.states(0) = 3.0;
    problem.phases(1).bounds.upper.states(1) = 3.0;
    
    problem.phases(1).bounds.lower.events(0) = 0.4;
    problem.phases(1).bounds.lower.events(1) = 1.0;


    problem.phases(1).bounds.upper.events(0) = 0.4;
    problem.phases(1).bounds.upper.events(1) = 1.0;


    problem.phases(1).bounds.lower.parameters(0)  = -1.0;
    problem.phases(1).bounds.lower.parameters(1)  = -1.0;
	 problem.phases(1).bounds.lower.parameters(2)  = -1.0;
    problem.phases(1).bounds.lower.parameters(3)  = -1.0;

    problem.phases(1).bounds.upper.parameters(0)  = 5.0;
    problem.phases(1).bounds.upper.parameters(1)  = 5.0;
	 problem.phases(1).bounds.upper.parameters(2)  = 5.0;
    problem.phases(1).bounds.upper.parameters(3)  = 5.0;


    problem.phases(1).bounds.lower.StartTime    = 0.0;
    problem.phases(1).bounds.upper.StartTime    = 0.0;

    problem.phases(1).bounds.lower.EndTime      = 10.0;
    problem.phases(1).bounds.upper.EndTime      = 10.0;

////////////////////////////////////////////////////////////////////////////
///////////////////  Register problem functions  ///////////////////////////
////////////////////////////////////////////////////////////////////////////

    problem.dae 		= &dae;
    problem.events 		= &events;
    problem.linkages		= &linkages;
    problem.observation_function = & observation_function;

////////////////////////////////////////////////////////////////////////////
///////////////////  Define & register initial guess ///////////////////////
////////////////////////////////////////////////////////////////////////////

    int nnodes =     (int) problem.phases(1).nsamples;

    MatrixXd state_guess(2, nnodes);
    MatrixXd param_guess(4,1);


    state_guess            << linspace(0.4, 0.4, nnodes ),
                              linspace(1.0, 1.0, nnodes );
	
    param_guess << 0.8, 0.8, 1.5, 1.5;

    problem.phases(1).guess.states        = state_guess;
    problem.phases(1).guess.time          = linspace(0.0, 10.0, nnodes);
    problem.phases(1).guess.parameters    = param_guess;



////////////////////////////////////////////////////////////////////////////
///////////////////  Enter algorithm options  //////////////////////////////
////////////////////////////////////////////////////////////////////////////

    algorithm.nlp_method                  = "IPOPT";
    algorithm.scaling                     = "automatic";
    algorithm.derivatives                 = "automatic";
    algorithm.collocation_method          = "trapezoidal";
    algorithm.mesh_refinement             = "automatic";
    algorithm.ode_tolerance               = 1.e-4;

////////////////////////////////////////////////////////////////////////////
///////////////////  Now call PSOPT to solve the problem   //////////////////
////////////////////////////////////////////////////////////////////////////

    psopt(solution, problem, algorithm);

////////////////////////////////////////////////////////////////////////////
///////////  Extract relevant variables from solution structure   //////////
////////////////////////////////////////////////////////////////////////////

    x = solution.get_states_in_phase(1);
    t = solution.get_time_in_phase(1);
    p = solution.get_parameters_in_phase(1);


////////////////////////////////////////////////////////////////////////////
///////////  Save solution data to files if desired ////////////////////////
////////////////////////////////////////////////////////////////////////////

    Save(x,"x.dat");
    Save(t,"t.dat");
    Save(p,"Estimated parameters");


////////////////////////////////////////////////////////////////////////////
///////////  Plot some results if desired (requires gnuplot) ///////////////
////////////////////////////////////////////////////////////////////////////

     MatrixXd tm;
     MatrixXd ym;

     tm = problem.phases(1).observation_nodes;
     
     ym = problem.phases(1).observations;



     spplot(t,x,tm,ym,problem.name, "time (s)", "state x1", "x1 x2 y1 y2");

  	  spplot(t,x,tm,ym,problem.name, "time (s)", "state x1", "x1 x2 y1 y2", "pdf", "x1x2.pdf");



}






////////////////////////////////////////////////////////////////////////////
///////////////////////      END OF FILE     ///////////////////////////////
////////////////////////////////////////////////////////////////////////////
